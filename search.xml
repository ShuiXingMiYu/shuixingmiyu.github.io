<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>02 16位汇编语言环境搭建</title>
      <link href="/2023/09/04/02%2016%E4%BD%8D%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/09/04/02%2016%E4%BD%8D%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于基于MS-DOS的Windows系统早已不受支持，所以目前采用DOSBox模拟器，用于运行适用于MS-DOS兼容操作系统的软件。</p></blockquote><ol><li><p>打开<a href="https://www.dosbox.com/" target="_blank">DOSBox官网</a></p></li><li><p>点击最新版本<img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/image-20230904150632549.png" alt="DOSBox最新版本按钮"></p></li><li><p>根据自己的操作系统选择合适的版本，这里以Windows系统演示。这里自动匹配到合适的版本，点击绿色按钮下载。<img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/image-20230904151115260.png" alt="自动匹配到合适的版本"></p></li><li><p>下载成功双击安装，点击下一步。<img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/image-20230904151341329.png" alt="点击下一步"></p></li><li><p>点击下一步。<img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/image-20230904151440280.png" alt="点下一步"></p></li><li><p>选择好安装位置，<strong>避免日后出现各种由于中文路径导致的各种问题，注意安装路径不要含有中文</strong>，点击安装。<img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/image-20230904151636312.png" alt="image-20230904151636312"></p></li><li><p><img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/image-20230904151806695.png" alt="image-20230904151806695"></p></li><li><p>安装完成后，需要简单配置一下，方便日后开箱即用。在快捷方式上鼠标右键，打开文件所在的位置。<img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/image-20230904152818737.png" alt="image-20230904152818737"></p></li><li><p><img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/image-20230904153824819.png" alt="image-20230904153824819"></p></li><li><p>保存修改后的配置，之后在打开DOSBox，可以自动运行<code>mount c c:\masm</code>、<code>c:</code>这两条命令了，省去每次都要手动输入的烦恼。<img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/image-20230904154246174.png" alt="image-20230904154246174"></p></li><li><p>汇编工具我这里采用MASM 5.10B版本，点击链接 <a href="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/MASM%205.10B.rar">https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/MASM%205.10B.rar</a> ，下载后将里面的文件解压到刚才挂载到DOSBox模拟器C盘的目录路径，我这里是<code>c:\masm</code>。这样就可以直接命令行调用masm等相关软件了。<img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/image-20230904182247519.png" alt="image-20230904182247519"></p></li><li><p>至此16位汇编语言学习环境搭建完成！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 16位汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 16位汇编语言环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 计算机初识</title>
      <link href="/2023/09/02/01%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%9D%E8%AF%86/"/>
      <url>/2023/09/02/01%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>建立此博客的初衷是记录我的学习笔记。</p><p>先写一些总结性的话，随着学习越来越深入，会越来越体会到这些话的意思。</p></blockquote><p>要知道，计算机只是一台机器，它有以下功能：</p><ul><li>移动数据</li><li>算术逻辑运算</li><li>控制硬件运行</li></ul><p>为什么要从汇编语言开始学习？</p><ul><li>因为今天除C语言外所有的语言，包括但不限于Java、Python、C++等等都是建立在C语言的基础之上的。</li><li>而C语言是建立在汇编语言基础之上的。</li><li>也就是说，这些Java等语言会先转化为C语言，然后C语言在转化为汇编语言，汇编语言在翻译成机器语言在计算机上运行的。</li><li>这是计算机的基石，要学习计算机，最好是从根上开始学。</li></ul><p>我不直接从汇编开始，直接学高级语言，例如Java可以吗？</p><ul><li>当然可以，不过我觉得基础决定能力上限，如果要全面系统学习计算机，我认为汇编语言应该是要学习的。</li></ul><blockquote><p><strong>汇编指令就是将数据从内存与寄存器之间来回移动。</strong></p></blockquote><blockquote><p><strong>计算机原理就是数数，查表、查地址。</strong></p></blockquote><p><strong>汇编指令与机器码是一一对应的关系。</strong></p><p><strong>汇编指令是机器码的助记符。</strong></p><p>汇编不依赖操作系统，直接操作硬件。</p><p>进制的本质：查数+进位</p><p>各种进制运算方法：查数，查表。和十进制没区别。</p><p>程序 &#x3D; 算法（流程） + 数据结构（数据按什么形式存储）</p><p>小端存储：高地址存高位，低地址存低位。</p><ul><li>例如 00403000 这个16进制数，为了好看我用空格分隔：00 40 30 00 ，这里最左边00是高位，最右边00是低位。<ul><li>有以下地址00401000、00401001、00401002、00401003，这四个地址分别存储：00401000这个地址存最右边00、00401001存30、00401002存40、00401003存最左边00。</li><li>注意：计算机内存是以字节为单位存储的，所以00或40或30都是一个字节，不能倒过来，比如把30写成03，这是错误的。</li></ul></li></ul><p>大端存储：高地址存低位，低地址存高位。</p><p><strong>随时查阅ASCII表：</strong></p><p><img src="https://raw.githubusercontent.com/ShuiXingMiYu/Picture/main/img/ascii2.png" alt="ascii表"></p><h3 id="计算机的硬件组成及结构"><a href="#计算机的硬件组成及结构" class="headerlink" title="计算机的硬件组成及结构"></a>计算机的硬件组成及结构</h3><p><strong>冯.诺伊曼计算机的特点是什么？</strong></p><ul><li>计算机有运算器、存储器、控制器、输入设备和输出设备五大部件组成。</li><li>指令和数据以同等地位存放于存储器内，并可按地址访问。</li><li>指令和数据均可用二进制表示。</li><li>指令由操作码和地址码组成。操作码表示操作的性质、地址码表示操作数在存储器中的位置。</li><li>指令在存储器中按顺序存放。通常，指令是顺序执行的。在特殊情况下，可根据运算结果或指定的条件来改变运算顺序。</li><li>机器以运算器为中心。输入输出设备和存储器之间的数据传送通过运算器完成。</li></ul><p><strong>汇编语言是由操作系统翻译成机器语言的，这个说法对吗？</strong></p><ul><li>不对，是由汇编程序翻译成机器语言目标程序。</li></ul><h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h4><ol><li><p>1个CPU的寻址能力为16KB，那么它的地址总线宽度是多少？</p><ul><li>14</li></ul></li><li><p>2KB的存储器有<strong>2048</strong>个存储单元。存储单元的编号从<strong>000</strong>到<strong>FFF</strong>。</p></li><li><p>2KB的存储器可以存储<strong>16384</strong>bit，<strong>2048</strong>byte。</p></li><li><p>1GB、1MB、1KB分别是<strong>1073741824</strong>、<strong>1048576</strong>、<strong>1024</strong>byte。</p></li><li><p>8080、8088、8086、80286、80386的数据线宽度分别是8根，8根，16根，16根，32根，则它们一次可以传送的数据为：<strong>1</strong>(B)、<strong>1</strong>(B)、<strong>2</strong>(B)、<strong>2</strong>(B)、<strong>4</strong>(B)。</p></li><li><p>8080、8088、80286、80386的地址总线宽度分别为16根，20根，24根，32根，则他们的寻址能力分别为<strong>64</strong>(KB)、<strong>1</strong>(MB)、<strong>16</strong>(MB)、<strong>4</strong>(GB)。</p></li><li><p>从内存中读取1024个字节的数据，8086至少需要读<strong>512</strong>次，80386至少读<strong>256</strong>次。</p></li><li><p>存储器中，数据和程序以<strong>二进制</strong>形式存放。</p></li><li><p>机器语言是用二进制代码表示的、计算机能直接识别和执行的一种机器指令的集合。</p></li></ol><h4 id="主板、接口卡、各类存储芯片"><a href="#主板、接口卡、各类存储芯片" class="headerlink" title="主板、接口卡、各类存储芯片"></a>主板、接口卡、各类存储芯片</h4><ol><li><p>16位和32位机器的内存地址空间是多少？寻址范围是多少？</p><ul><li>16位内存地址空间最大为<code>64KB</code>，寻址范围<code>0000 - FFFF</code></li><li>32位内存地址空间最大为<code>4G</code>，寻址范围<code>00000000 - FFFFFFFF</code></li></ul></li><li><p>PC中包含哪些存储器？</p><ul><li><code>ROM</code> 只读存储器</li><li><code>RAM</code> 随机存储器</li></ul></li><li><p>为什么有些地址读写无效？</p><ul><li>在ROM存储器中的数据只能读，不能写，防止用户修改其关键数据导致出错。</li></ul></li><li><p>请描述显示器显示信息的过程？</p><ul><li>（应用程序&#x2F;输入设备产生）数据与指令—&gt;CPU—&gt;显卡驱动程序—&gt;显卡—&gt;显示器</li></ul></li><li><p>CPU如何控制外部设备的？</p><ul><li>通过CPU读写外部设备上的寄存器实现，外设寄存器也称为“I&#x2F;O端口”。</li></ul></li></ol><h3 id="数据的表示方法"><a href="#数据的表示方法" class="headerlink" title="数据的表示方法"></a>数据的表示方法</h3><h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><ol><li><p>2+3&#x3D;1 成立吗？说明理由。</p><ul><li>可以成立，例如一个六进制，符号含义由小到大定义为0，6，2，3，4，1，5，可满足2+3&#x3D;1。</li></ul></li><li><p>分别用2、5、7、9、16进制写100个数，从0开始。</p><ul><li>2进制<ul><li><code>0、1、10、11、100、101、110、111、1000、1001、1010、1011、1100、1101、1110、1111、10000、10001、10010、10011、10100、10101、10110、10111、11000、11001、11010、11011、11100、11101、11110、11111、100000、100001、100010、100011、100100、100101、100110、100111、101000、101001、101010、101011、101100、101101、101110、101111、110000、110001、110010、110011、110100、110101、110110、110111、111000、111001、111010、111011、111100、111110、111111、1000000、1000001、1000010、1000011、1000100、1000101、1000110、1000111、1001000、1001001、1001010、1001011、1001100、1001101、1001110、1001111、1010000、1010001、1010010、1010011、1010100、1010101、1010110、1010111、1011000、1011001、1011010、1011011、1011100、1011101、1011110、1011111、1100000、1100001、1100010、1100011、1100100</code></li></ul></li><li>5进制<ul><li><code>0、1、2、3、4、10、11、12、13、14、20、21、22、23、24、30、31、32、33、34、40、41、42、43、44、100、101、102、103、104、110、111、112、113、114、120、121、122、123、124、130、131、132、133、134、140、141、142、143、144、200、201、202、203、204、210、211、212、213、214、220、221、222、223、224、230、231、232、233、234、240、241、242、243、244、300、301、302、303、304、310、311、312、313、314、320、321、322、323、324、330、331、332、333、334、340、341、342、343、344、400</code></li></ul></li><li>7进制<ul><li><code>0、1、2、3、4、5、6、10、11、12、13、14、15、16、20、21、22、23、24、25、26、30、31、32、33、34、35、36、40、41、42、43、44、45、46、50、51、52、53、54、55、56、60、61、62、63、64、65、66、100、101、102、103、104、105、106、110、111、112、113、114、115、116、120、121、122、123、124、125、126、130、131、132、133、134、135、136、140、141、142、143、144、145、146、150、151、152、153、154、155、160、161、162、163、164、165、166、200、201、202</code></li></ul></li><li>9进制<ul><li><code>0、1、2、3、4、5、6、7、8、10、11、12、13、14、15、16、17、18、20、21、22、23、24、25、26、27、28、30、31、32、33、34、35、36、37、38、40、41、42、43、44、45、46、47、48、50、51、52、53、54、55、56、57、58、60、61、62、63、64、65、66、67、68、70、71、72、73、74、75、76、77、78、80、81、82、83、84、85、86、87、88、100、101、102、103、104、105、106、107、108、110、111、112、113、114、115、116、117、118、120、121</code></li></ul></li><li>16进制<ul><li><code>0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20,21,22,23,24,25,26,27,28,29,2A,2B,2C,2D,2E,2F,30,31,32,33,34,35,36,37,38,39,3A,3B,3C,3D,3E,3F,40,41,42,43,44,45,46,47,48,49,4A,4B,4C,4D,4E,4F,50,51,52,53,54,55,56,57,58,59,5A,5B,5C,5D,5E,5F,60,61,62,63,64</code></li></ul></li></ul></li><li><p>自定义十进制：A S B L K 6 7 V 9 5，从0开始写100个数。</p><ul><li><code>A,S,B,L,K,6,7,V,9,5, SA,SS,SB,SL,SK,S6,S7,SV,S9,S5, BA,BS,BB,BL,BK,B6,B7,BV,B9,B5, LA,LS,LB,LL,LK,L6,L7,LV,L9,L5, KA,KS,KB,KL,KK,K6,K7,KV,K9,K5, 6A,6S,6B,6L,6K,66,67,6V,69,65, 7A,7S,7B,7L,7K,76,77,7V,79,75, VA,VS,VB,VL,VK,V6,V7,VV,V9,V5, 9A,9S,9B,9L,9K,96,97,9V,99,95, 5A,5S,5B,5L,5K,56,57,5V,59,55, SAA</code></li></ul></li></ol><h4 id="进制运算"><a href="#进制运算" class="headerlink" title="进制运算"></a>进制运算</h4><ol><li>编制7进制加法表，乘法表，并计算下面的结果：</li></ol><ul><li><table><thead><tr><th align="center">七</th><th align="center">进</th><th align="center">制</th><th align="center">加</th><th align="center">法</th><th align="center">表</th></tr></thead><tbody><tr><td align="center">1+1&#x3D;2</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1+2&#x3D;3</td><td align="center">2+2&#x3D;4</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1+3&#x3D;4</td><td align="center">2+3&#x3D;5</td><td align="center">3+3&#x3D;6</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1+4&#x3D;5</td><td align="center">2+4&#x3D;6</td><td align="center">3+4&#x3D;10</td><td align="center">4+4&#x3D;11</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1+5&#x3D;6</td><td align="center">2+5&#x3D;10</td><td align="center">3+5&#x3D;11</td><td align="center">4+5&#x3D;12</td><td align="center">5+5&#x3D;13</td><td align="center"></td></tr><tr><td align="center">1+6&#x3D;10</td><td align="center">2+6&#x3D;11</td><td align="center">3+6&#x3D;12</td><td align="center">4+6&#x3D;13</td><td align="center">5+6&#x3D;14</td><td align="center">6+6&#x3D;15</td></tr></tbody></table></li><li><table><thead><tr><th align="center">七</th><th align="center">进</th><th align="center">制</th><th align="center">乘</th><th align="center">法</th><th align="center">表</th></tr></thead><tbody><tr><td align="center">1*1&#x3D;1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1*2&#x3D;2</td><td align="center">2*2&#x3D;4</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1*3&#x3D;3</td><td align="center">2*3&#x3D;6</td><td align="center">3*3&#x3D;12</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1*4&#x3D;4</td><td align="center">2*4&#x3D;11</td><td align="center">3*4&#x3D;15</td><td align="center">4*4&#x3D;22</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1*5&#x3D;5</td><td align="center">2*5&#x3D;13</td><td align="center">3*5&#x3D;21</td><td align="center">4*5&#x3D;26</td><td align="center">5*5&#x3D;34</td><td align="center"></td></tr><tr><td align="center">1*6&#x3D;6</td><td align="center">2*6&#x3D;15</td><td align="center">3*6&#x3D;24</td><td align="center">4*6&#x3D;33</td><td align="center">5*6&#x3D;42</td><td align="center">6*6&#x3D;51</td></tr></tbody></table><ul><li>23456+54356 &#x3D; 111145</li><li>5621-654 &#x3D; 4634</li><li>234*65 &#x3D; 22566</li></ul></li></ul><ol start="2"><li>编制16进制加法表，乘法表，并计算下面的结果：<ul><li>2D4E6+CF3A6 &#x3D; FC88C</li><li>5FD1-E5A &#x3D; 5177</li><li>2CA*A5 &#x3D; 1CC32</li></ul></li><li>9进制定义：由9个符号组成，分别是：2、9、1、7、6、5、4、8、3，逢9进1。计算：123 + 234 &#x3D;<ul><li>725</li></ul></li><li>10进制定义：由10个符号组成，分别是：!、@、$、%、^、&amp;、*、A、B、C，逢10进1  计算：@$$B + %AC&amp; &#x3D;<ul><li>&amp;!$%</li></ul></li></ol><h4 id="二进制的简写与转换"><a href="#二进制的简写与转换" class="headerlink" title="二进制的简写与转换"></a>二进制的简写与转换</h4><ol><li><p>将下面的二进制数用16进制表示（不允许使用计算器也不允许计算）<br>  1100 1011 0101 0100 1110 1011 0101 0111 1011 0100 1010 1011</p><ul><li><code>C B 5 4 E B 5 7 B 4 A B</code></li></ul></li><li><p>将下面的十六进制数用二进制表示（不允许使用计算器也不允许计算）</p><p>487FDC120ACE69B953FE</p><ul><li><code>0100 1000 0111 1111 1101 1100 0001 0010 0000 1010 1100 1110 0110 1001 1011 1001 0101 0011 1111 1110</code></li></ul></li><li><p>将下面的二进制数转换为十进制数（无符号数先使用算法，然后用计算器检验） </p><ul><li><code>00100111B=39D</code></li><li><code>101101101111B=2927D</code></li><li><code>01100001B=97D</code></li></ul></li><li><p>将下面的十进制数转换为二进制数（无符号数先使用算法，然后用计算器检验）</p><ul><li><code>121D=01111001B</code></li><li><code>2345D=100100101001B</code></li><li><code>13124D=0011001101000100B</code></li><li><code>121798D=00011101101111000110B</code></li></ul></li><li><p>将下面的16进制数转换为十进制数（无符号数先使用算法，然后用计算器检验）</p><ul><li><code>87DAFH=556463D</code></li><li><code>875B3FH=8870719D</code></li><li><code>7A8CBFFH=128502783D</code></li><li><code>1234H=4660D</code></li></ul></li><li><p>将下面的十进制数转换为16进制数（无符号数先使用算法，然后用计算器检验）</p><ul><li><code>412434D=64B12H</code></li><li><code>3643D=E3BH</code></li><li><code>643262D=9D0BEH</code></li><li><code>345D=159H</code></li></ul></li></ol><h4 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h4><p>仔细体会计算机计数与数学计数的区别：计算机中的数据一定是有宽度限制的。</p><hr><p><strong>为什么计算机会被称为16位、32位计算机或者64位呢？</strong></p><ul><li>因为每次最多只能存取16位、32位、64位的数据。</li></ul><p><strong>如果数据超过内存单元的数据宽度，计算机还可以对该数据进行加减乘除运算吗？</strong></p><ul><li>可以。</li></ul><hr><h4 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h4><ol><li><p>为什么要有数据宽度?</p><ul><li>受到硬件的制约，数据是有长度限制的。</li></ul></li><li><p>已知0x9A是一个有符号数，那么请说明它是正数还是负数？</p><ul><li>0x9A的二进制为1001 1010。如果数据宽度为8位，则是负数。如果数据宽度为16位、32位、64位则为正数。</li></ul></li><li><p>分别列出 6、-6、7、-7、8、-8、9、-9、1、-1、0、-0 的原码反码补码</p><ul><li><code>6 原码：0000 0110 反码：0000 0110 补码：0000 0110 -6 原码：1000 0110 反码：1111 1001 补码：1111 1010 7 原码：0000 0111 反码：0000 0111 补码：0000 0111 -7 原码：1000 0111 反码：1111 1000 补码：1111 1001 8 原码：0000 1000 反码：0000 1000 补码：0000 1000 -8 原码：1000 1000 反码：1111 0111 补码：1111 1000 9 原码：0000 1001 反码：0000 1001 补码：0000 1001 -9 原码：1000 1001 反码：1111 0110 补码：1111 0111 1 原码：0000 0001 反码：0000 0001 补码：0000 0001 -1 原码：1000 0001 反码：1111 1110 补码：1111 1111 0 原码：0000 0000 反码：0000 0000 补码：0000 0000 -0 原码：1000 0000 反码：1111 1111 补码：0000 0000</code></li></ul></li><li><p>已知数据宽度为8Bit，请通过下面的值得到对应原码：</p><ul><li><code>7F  ：0111 1111 9A  ：1001 1010 86  ：1000 0110 5F ：0101 1111 3E  ：0011 1110 A3 ：1010 0011 B7 ：1011 0111 5D：0101 1101</code></li></ul></li><li><p>已知数据宽度为32 Bit，请通过下面的值得到对应原码：</p><ul><li><code>0xFFFFFF = 0000 0000 1111 1111 1111 1111 1111 1111 0x81234567 = 1000 0001 0010 0011 0100 0101 0110 0111</code></li></ul></li><li><p>有符号的正数是原码存储  有符号的负数是补码存储  那么无符号数呢？</p><ul><li>无符号的正数原码存储，无符号的负数补码存储。</li></ul></li><li><p>当计算机中存储的0x81234时，代表的值是多少？</p><ul><li>0x81234 &#x3D; 0000 0000 0000 1000 0001 0010 0011 0100B<br>数据宽度为32位时，不管有符号数和无符号数，都代表十进制正数528948。</li></ul></li></ol><h3 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h3><p>思考：<br>0为假，1为真</p><p>1.计算机是二进制运算的 1<br>2.布尔运算用于二进制运算，也叫位运算  1<br>3.计算机只能做布尔运算，对吗？  0</p><h3 id="位运算之加减乘除"><a href="#位运算之加减乘除" class="headerlink" title="位运算之加减乘除"></a>位运算之加减乘除</h3><ol><li><p>如何通过位运算判断一个数是奇数还是偶数？</p><ul><li>只需要判断最后一位是1还是0，1为奇数，0为偶数。设这个数为X，X&amp;1 &#x3D; 1 则这个数为奇数，为0则是偶数。</li></ul></li><li><p>如何读取二进制数中的某一位的值?</p><ul><li>与运算，比如取数 X&#x3D;1010 1110 的低2位，只需要另找一个数Y，令Y的低2位为1，其余位为0，即Y&#x3D;0000 0011，然后将X与Y进行按位与运算（X&amp;Y&#x3D;0000 0010）即可得到X的指定位。</li></ul></li><li><p>如何设置二进制数中的某一位的值?</p><ul><li>想设置某一位为0，采用按位与运算。其余位为1，想要置0的那一位为0。<br>设置某一位为1，采用按位或运算。其余位为0，想要置1的那一位为1。</li></ul></li><li><p>2*8的最高效的实现方式</p><ul><li>采用位运算<br>2&lt;&lt;3<br>将x左移三位相当于x乘以2的3次方。<br>相反，将x右移三位相当于x除以2的3次方。</li></ul></li><li><p>使用异或对 87AD6 进行加密后再进行解密，加解密密钥:5</p><ul><li><code>87AD6 = 0000 0000 0000 1000 0111 1010 1101 0110（原值）      5 = 0000 0000 0000 0000 0000 0000 0000 0101  异或 = 0000 0000 0000 1000 0111 1010 1101 0011（加密）</code><br>用加密值再次异或密钥得出解密值。<br><code>加密值=0000 0000 0000 1000 0111 1010 1101 0011    5 = 0000 0000 0000 0000 0000 0000 0000 0101   异或 = 0000 0000 0000 1000 0111 1010 1101 0110（解密）</code></li></ul></li><li><p>八进制数2-5 在计算器中的的结果是：1777777777777777777775   为什么？</p><ul><li><p><code>本质：计算机内部只存储二进制，其他进制只是表示形式不同 64位中 2-5 = -3</code><br><code>-1 在计算机中表示 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111  -2 在计算机中表示 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1110 -3 在计算机中表示 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1101</code></p><p><code>将-3的二进制转换成8进制 1 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 101 1 7      7     7     7     7     7     7     7     7     7     7     7     7     7     7     7     7     7     7     7     5</code></p></li></ul></li><li><p>只用逻辑运算计算2-3&#x3D;？(涉及内容：逻辑运算、移位、数据宽度)</p><ul><li><code>正数原码、反码、补码相同 负数在计算机中以补码形式存储。 2 = 0010 -3= 1011（原码）1100（反码）1101（补码）</code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0010</span></span><br><span class="line">异或<span class="number">1101</span></span><br><span class="line">--------------------</span><br><span class="line"> <span class="number">1111</span>R：<span class="number">1111</span></span><br><span class="line"></span><br><span class="line"><span class="number">0010</span></span><br><span class="line">与  <span class="number">1101</span></span><br><span class="line">--------------------</span><br><span class="line"><span class="number">0000</span>&lt;&lt;<span class="number">1</span> 得出<span class="number">0000</span></span><br></pre></td></tr></table></figure></li><li><code>所以最终结果为1111，根据计算机底层存储原理可知是-1。</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章测试</title>
      <link href="/2023/08/31/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/08/31/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>测试</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/31/hello-world/"/>
      <url>/2023/08/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
